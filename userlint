#!/usr/bin/python3

# Copyright (C) 2022, Benjamin Drung <bdrung@ubuntu.com>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.

"""Check git authors and commits for correct names and email addresses."""

import argparse
import functools
import logging
import os
import re
import sys
import typing

import publicsuffix2
import pygit2

LOG_FORMAT = "%(name)s %(levelname)s: %(message)s"
__script_name__ = os.path.basename(sys.argv[0]) if __name__ == "__main__" else __name__


@functools.lru_cache(maxsize=1)
def get_tld_re() -> str:
    """Return regular expression for top-level domains (TLD)."""
    suffix_list = publicsuffix2.PublicSuffixList()
    return "|".join(re.escape(tld) for tld in suffix_list.tlds)


EMAIL_RE = re.compile(rf"^[A-Za-z0-9.+_-]+@[A-Za-z0-9.+-]+\.(?:{get_tld_re()})$")
INVALID_NAME_RE = re.compile("^[a-z0-9.+_-]*$")
NAME_AND_EMAIL_RE = re.compile(rf"^(.*) ([A-Za-z0-9.+_-]+@[A-Za-z0-9.+-]+\.(?:{get_tld_re()}))$")


class Person:
    """Represents an author or committer."""

    def __init__(self, name: str, email: str, function: str):
        self.name = name
        self.email = email
        self.function = function

    def __eq__(self, other):
        return isinstance(other, Person) and self.name == other.name and self.email == other.email

    def __lt__(self, other):
        return self.name < other.name or (self.name == other.name and self.email < other.email)

    def __hash__(self):
        return hash(str(self))

    def __repr__(self):
        return (
            f"{self.__class__.__name__}(name={self.name!r}, email={self.email!r},"
            f" function={self.function!r})"
        )

    def __str__(self):
        return f"{self.name} <{self.email}>"

    def is_valid(self):
        """Heuristic check if the name and public email is valid."""
        return is_valid_name(self.name) and is_valid_email(self.email)

    def _get_found_match(
        self, matches: list, match_on: str, match_value: str
    ) -> typing.Optional[str]:
        if len(matches) == 1:
            return f"{matches[0]} {self}"
        logger = logging.getLogger(__script_name__)
        logger.warning(
            "Found %i matching persons for %s '%s': %s",
            len(matches),
            match_on,
            match_value,
            matches,
        )
        return None

    def _suggested_mailmap_for_invalid_name(self, valid: typing.Iterable) -> typing.Optional[str]:
        matching = [p for p in valid if p.email == self.email]
        if matching:
            return self._get_found_match(matching, "email address", self.email)

        matching = [p for p in valid if p.email == self.name]
        if matching:
            return self._get_found_match(matching, "email address", self.name)

        return None

    def _suggested_mailmap_for_invalid_email(self, valid: typing.Iterable) -> typing.Optional[str]:
        if self.email == "":
            matching = [p for p in valid if p.email == self.name]
            if matching:
                return self._get_found_match(matching, "email address", self.name)

            match = NAME_AND_EMAIL_RE.match(self.name)
            if match:
                return f"{match.group(1)} <{match.group(2)}> {self}"

        matching = [p for p in valid if p.name == self.name]
        if matching:
            return self._get_found_match(matching, "name", self.name)

        return None

    def suggested_mailmap(self, valid: typing.Iterable) -> typing.Optional[str]:
        """Heuristic to find correct names and email addresses."""
        mailmap = None
        if not is_valid_email(self.email):
            mailmap = self._suggested_mailmap_for_invalid_email(valid)
        if mailmap is None and not is_valid_name(self.name):
            mailmap = self._suggested_mailmap_for_invalid_name(valid)
        return mailmap


class Author(Person):
    """Represents an author."""

    def __init__(self, name: str, email: str):
        super().__init__(name, email, "author")

    def __repr__(self):
        return f"{self.__class__.__name__}(name={self.name!r}, email={self.email!r})"

    @classmethod
    def from_commit(cls, commit: pygit2.Commit):
        """Return Author object from given commit."""
        return cls(commit.author.name, commit.author.email)


class Committer(Person):
    """Represents a committer."""

    def __init__(self, name: str, email: str):
        super().__init__(name, email, "committer")

    def __repr__(self):
        return f"{self.__class__.__name__}(name={self.name!r}, email={self.email!r})"

    @classmethod
    def from_commit(cls, commit: pygit2.Commit):
        """Return Committer object from given commit."""
        return cls(commit.committer.name, commit.committer.email)


def is_valid_email(email: str) -> bool:
    """Heuristic check if the email address is valid.

    This function does only a basic check to find invalid addresses.
    It may complain about valid addresses that are probably undesired
    for use in git commits.
    """
    return bool(EMAIL_RE.match(email))


def is_valid_name(name: str) -> bool:
    """Heuristic check if the name is not an email or nickname."""
    if EMAIL_RE.match(name):
        return False
    return not INVALID_NAME_RE.match(name)


def classify_poeple(
    repo: pygit2.Repository, reference: pygit2.Reference
) -> typing.Tuple[set[Person], set[Person]]:
    """Classify authors and committers in list of valid and invalid ones."""
    logger = logging.getLogger(__script_name__)
    valid = set()
    invalid = set()

    commits = 0
    for commit in repo.walk(reference.target):
        logger.debug("Checking commit %s...", commit.hex)
        author = Author.from_commit(commit)
        committer = Committer.from_commit(commit)
        if author.is_valid():
            valid.add(author)
        else:
            invalid.add(author)
        if committer.is_valid():
            valid.add(committer)
        else:
            invalid.add(committer)
        commits += 1

    if invalid:
        logger.warning(
            "Checked %i commits, found %i valid and %i invalid entries:\n%s",
            commits,
            len(valid),
            len(invalid),
            "\n".join([str(p) for p in sorted(invalid)]),
        )
    else:
        logger.info(
            "Checked %i commits, found %i valid and no invalid entries.", commits, len(valid)
        )
    return valid, invalid


def suggest_mailmap(valid: set[Person], invalid: set[Person]) -> None:
    """Log mailmap suggestion for invalid persons."""
    mailmap = []
    for person in sorted(invalid):
        suggestion = person.suggested_mailmap(valid)
        if suggestion:
            mailmap.append(suggestion)
    if mailmap:
        logger = logging.getLogger(__script_name__)
        logger.info("Suggested mailmap:\n%s", "\n".join(mailmap))


def main(argv: list[str]) -> int:
    """Check git authors and commits for correct names and email addresses."""
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-d",
        "--directory",
        default=".",
        help="Directory of git repository (default: current directory)",
    )
    parser.add_argument(
        "--debug",
        dest="log_level",
        help="Print debug output",
        action="store_const",
        const=logging.DEBUG,
        default=logging.INFO,
    )
    args = parser.parse_args(argv)
    logging.basicConfig(format=LOG_FORMAT, level=args.log_level)

    repo = pygit2.Repository(os.path.join(args.directory, ".git"))
    valid, invalid = classify_poeple(repo, repo.head)
    suggest_mailmap(valid, invalid)
    return min(len(invalid), 1)


if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))  # pragma: no cover
