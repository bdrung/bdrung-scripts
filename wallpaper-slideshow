#!/usr/bin/python3

# Copyright 2017-2019 Benjamin Drung <bdrung@posteo.de>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# pylint: disable=invalid-name
# pylint: enable=invalid-name

"""Create a GNOME wallpaper slideshow.

Example call:

```
wallpaper-slideshow -n "Vacation 2019" ~/Pictures/2019_Vacation"
```

This would create a slideshow named `Vacation 2019` using all images from the
directory `~/Pictures/2019_Vacation`.
"""

import argparse
import datetime
import logging
import random
import re
import os

import jinja2

BACKGROUND_DIRECTORY = "~/.local/share/backgrounds"
WALLPAPER_DIRECTORY = "~/.local/share/gnome-background-properties"
LOG_FORMAT = "%(levelname)s: %(message)s"

BACKGROUND_TEMPLATE = """\
<background>
  <starttime>
    <year>{{ year }}</year>
    <month>01</month>
    <day>01</day>
    <hour>00</hour>
    <minute>00</minute>
    <second>00</second>
  </starttime>
<!-- This animation will start at midnight. -->
{%- for image in images %}
  <static>
    <duration>{{ duration }}</duration>
    <file>{{ image }}</file>
  </static>
{%- if not loop.last %}
  <transition>
    <duration>{{ transition_duration }}</duration>
    <from>{{ image }}</from>
    <to>{{ images[loop.index0 + 1] }}</to>
  </transition>
{%- endif %}
{%- endfor %}
</background>
"""

WALLPAPER_TEMPLATE = """\
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE wallpapers SYSTEM "gnome-wp-list.dtd">
<wallpapers>
  <wallpaper>
    <name>{{ name }}</name>
    <filename>{{ background_filename }}</filename>
    <options>zoom</options>
    <pcolor>#000000</pcolor>
    <scolor>#000000</scolor>
    <shade_type>solid</shade_type>
  </wallpaper>
</wallpapers>
"""


def duration_str(duration):
    """Return duration in the biggest useful time unit (years, days, hours, minutes, seconds)."""
    if duration < 60:
        return "%i seconds" % (duration)
    if duration < 3600:
        return "%.2f minutes (= %i s)" % (duration / 60, duration)
    if duration < 86400:
        return "%.2f hours (= %i s)" % (duration / 3600, duration)
    if duration < 31536000:
        return "%.2f days (= %.2f h = %i s)" % (duration / 86400, duration / 3600, duration)
    return "%.2f years (= %i s)" % (duration / 31536000, duration)


def main():
    """Create a GNOME wallpaper slideshow."""
    parser = argparse.ArgumentParser()
    parser.add_argument("-n", "--name", default="My Wallpapers",
                        help="Name of the slideshow (default: %(default)r)")
    parser.add_argument("-f", "--filename",
                        help=("Filename for background file in %s and wallpaper file in %s "
                              "(default: derive from given name)"
                              % (BACKGROUND_DIRECTORY, WALLPAPER_DIRECTORY)))
    parser.add_argument("-d", "--duration", default=895.0, type=float,
                        help="Duration in seconds showing one image (default: %(default)s)")
    parser.add_argument("-t", "--transition-duration", default=5.0, type=float,
                        help="Duration in seconds of transition between two images "
                             "(default: %(default)s)")
    parser.add_argument("directory", nargs="*",
                        help="Directory containing the images for the slideshow "
                             "(default: current directory)")
    args = parser.parse_args()
    logging.basicConfig(format=LOG_FORMAT, level=logging.INFO)
    logger = logging.getLogger(__name__)

    if not args.directory:
        args.directory = ["."]
    if not args.filename:
        args.filename = re.sub(" ", "_", args.name)
    if not re.match(r"^\w+$", args.filename):
        parser.error("Invalid filename '%s'. It must only contain alphanumeric character "
                     "and the underscore. Please specify one with --filename." % (args.filename))

    images = []
    for directory in args.directory:
        images = [os.path.join(directory, f) for f in os.listdir(directory)]
    random.shuffle(images)
    template = jinja2.Template(BACKGROUND_TEMPLATE)
    output = template.render(duration=args.duration, images=images, filename=args.filename,
                             transition_duration=args.transition_duration,
                             year=datetime.datetime.today().year)
    background_filename = os.path.expanduser(os.path.join(BACKGROUND_DIRECTORY,
                                                          args.filename + '.xml'))
    with open(background_filename, 'w') as background_file:
        background_file.write(output)
    logger.info("Created background file '%s'.", background_filename)
    full_duration = len(images) * args.duration + (len(images) - 1) * args.transition_duration
    logger.info("A full duration takes %s.", duration_str(full_duration))

    template = jinja2.Template(WALLPAPER_TEMPLATE)
    relative_background_filename = os.path.relpath(background_filename, os.path.expanduser("~"))
    output = template.render(name=args.name, background_filename=relative_background_filename)
    wallpaper_filename = os.path.expanduser(os.path.join(WALLPAPER_DIRECTORY,
                                                         args.filename + '.xml'))
    with open(wallpaper_filename, 'w') as wallpaper_file:
        wallpaper_file.write(output)
    logger.info("Created wallpaper file '%s'.", wallpaper_filename)


if __name__ == '__main__':
    main()
